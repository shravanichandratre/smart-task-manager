{"ast":null,"code":"\n\n// import React, { useState, useEffect } from 'react';\n// import axios from 'axios';\n// import TaskInput from './components/TaskInput';\n// import VoiceInput from './components/VoiceInput';\n// import TaskList from './components/TaskList';\n\n// const App = () => {\n//   const [tasks, setTasks] = useState([]);\n\n//   // Fetch tasks from the server initially\n//   useEffect(() => {\n//     const fetchTasks = async () => {\n//       try {\n//         const response = await axios.get('http://localhost:8000/tasks/');\n//         setTasks(response.data);\n//       } catch (error) {\n//         console.error(\"Error fetching tasks:\", error);\n//       }\n//     };\n\n//     fetchTasks();\n//   }, []);\n\n//   // Handle task creation (called from TaskInput or VoiceInput)\n//   const handleCreateTask = (newTask) => {\n//     setTasks((prevTasks) => [...prevTasks, newTask]);\n//   };\n\n//   // Handle task completion\n//   const handleCompleteTask = async (taskId) => {\n//     try {\n//       // Find the task to update based on the taskId\n//       const taskToUpdate = tasks.find((task) => task.id === taskId);\n\n//       // Toggle the 'completed' status of the task\n//       const updatedTask = { ...taskToUpdate, completed: !taskToUpdate.completed };\n\n//       // Send a PUT request to the backend to update the task\n//       await axios.put(`http://localhost:8000/tasks/${taskId}`, updatedTask);\n\n//       // Update the local state to reflect the new 'completed' status\n//       setTasks((prevTasks) =>\n//         prevTasks.map((task) =>\n//           task.id === taskId ? { ...task, completed: updatedTask.completed } : task\n//         )\n//       );\n//     } catch (error) {\n//       console.error(\"Error completing task:\", error);\n//     }\n//   };\n\n//   // Handle task deletion\n//   const handleDeleteTask = async (taskId) => {\n//     try {\n//       // Delete task from the backend\n//       await axios.delete(`http://localhost:8000/tasks/${taskId}`);\n\n//       // Update the state locally\n//       setTasks((prevTasks) => prevTasks.filter((task) => task.id !== taskId));\n//     } catch (error) {\n//       console.error(\"Error deleting task:\", error);\n//     }\n//   };\n\n//   return (\n//     <div>\n//       <h1>Task Manager</h1>\n//       <TaskInput onCreate={handleCreateTask} />\n//       <VoiceInput onCreate={handleCreateTask} />\n//       <TaskList\n//         tasks={tasks}\n//         onSelectTask={(task) => console.log(task)}\n\n//         Task={handleCompleteTask}\n//         onDeleteTask={handleDeleteTask}\n//       />\n//     </div>\n//   );\n// };\n\n// export default App;","map":{"version":3,"names":[],"sources":["/Users/shravanichandratre/Desktop/smart-task-manager/frontend/smart-task-manager-ui/src/App.js"],"sourcesContent":["\n\n// import React, { useState, useEffect } from 'react';\n// import axios from 'axios';\n// import TaskInput from './components/TaskInput';\n// import VoiceInput from './components/VoiceInput';\n// import TaskList from './components/TaskList';\n\n// const App = () => {\n//   const [tasks, setTasks] = useState([]);\n\n//   // Fetch tasks from the server initially\n//   useEffect(() => {\n//     const fetchTasks = async () => {\n//       try {\n//         const response = await axios.get('http://localhost:8000/tasks/');\n//         setTasks(response.data);\n//       } catch (error) {\n//         console.error(\"Error fetching tasks:\", error);\n//       }\n//     };\n\n//     fetchTasks();\n//   }, []);\n\n//   // Handle task creation (called from TaskInput or VoiceInput)\n//   const handleCreateTask = (newTask) => {\n//     setTasks((prevTasks) => [...prevTasks, newTask]);\n//   };\n\n//   // Handle task completion\n//   const handleCompleteTask = async (taskId) => {\n//     try {\n//       // Find the task to update based on the taskId\n//       const taskToUpdate = tasks.find((task) => task.id === taskId);\n  \n//       // Toggle the 'completed' status of the task\n//       const updatedTask = { ...taskToUpdate, completed: !taskToUpdate.completed };\n  \n//       // Send a PUT request to the backend to update the task\n//       await axios.put(`http://localhost:8000/tasks/${taskId}`, updatedTask);\n  \n//       // Update the local state to reflect the new 'completed' status\n//       setTasks((prevTasks) =>\n//         prevTasks.map((task) =>\n//           task.id === taskId ? { ...task, completed: updatedTask.completed } : task\n//         )\n//       );\n//     } catch (error) {\n//       console.error(\"Error completing task:\", error);\n//     }\n//   };\n  \n\n//   // Handle task deletion\n//   const handleDeleteTask = async (taskId) => {\n//     try {\n//       // Delete task from the backend\n//       await axios.delete(`http://localhost:8000/tasks/${taskId}`);\n\n//       // Update the state locally\n//       setTasks((prevTasks) => prevTasks.filter((task) => task.id !== taskId));\n//     } catch (error) {\n//       console.error(\"Error deleting task:\", error);\n//     }\n//   };\n\n//   return (\n//     <div>\n//       <h1>Task Manager</h1>\n//       <TaskInput onCreate={handleCreateTask} />\n//       <VoiceInput onCreate={handleCreateTask} />\n//       <TaskList\n//         tasks={tasks}\n//         onSelectTask={(task) => console.log(task)}\n        \n//         Task={handleCompleteTask}\n//         onDeleteTask={handleDeleteTask}\n//       />\n//     </div>\n//   );\n// };\n\n// export default App;\n"],"mappings":";;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}