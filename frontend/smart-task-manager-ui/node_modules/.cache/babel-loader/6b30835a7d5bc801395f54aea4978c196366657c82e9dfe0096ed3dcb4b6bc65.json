{"ast":null,"code":"var _jsxFileName = \"/Users/shravanichandratre/Desktop/smart-task-manager/frontend/smart-task-manager-ui/src/components/TaskManager.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport TaskInput from './TaskInput';\nimport VoiceInput from './VoiceInput';\nimport TaskList from './TaskList';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst TaskManager = () => {\n  _s();\n  const [tasks, setTasks] = useState([]);\n\n  // Fetch tasks from backend on component mount\n  useEffect(() => {\n    const fetchTasks = async () => {\n      try {\n        const response = await axios.get('http://localhost:8000/tasks/');\n        setTasks(response.data);\n      } catch (error) {\n        console.error(\"Error fetching tasks:\", error);\n      }\n    };\n    fetchTasks();\n\n    // WebSocket for real-time updates\n    const socket = new WebSocket('ws://localhost:8000/ws/tasks');\n    socket.onmessage = event => {\n      try {\n        const task = JSON.parse(event.data);\n        setTasks(prevTasks => [...prevTasks, task]); // Add new task to the list\n      } catch (error) {\n        console.error(\"Error parsing WebSocket message:\", error);\n      }\n    };\n    return () => {\n      socket.close(); // Close WebSocket connection when component unmounts\n    };\n  }, []);\n\n  // Function to add a task after creation (called by TaskInput and VoiceInput)\n  const handleCreateTask = newTask => {\n    setTasks(prevTasks => [...prevTasks, newTask]);\n  };\n\n  // Handle task completion (Example: Toggle completion status)\n  const handleCompleteTask = async taskId => {\n    try {\n      const task = tasks.find(t => t.id === taskId);\n      const updatedTask = {\n        ...task,\n        completed: !task.completed\n      };\n      await axios.put(`http://localhost:8000/tasks/${taskId}/`, updatedTask);\n      setTasks(prevTasks => prevTasks.map(t => t.id === taskId ? updatedTask : t));\n    } catch (error) {\n      console.error(\"Error updating task:\", error);\n    }\n  };\n\n  // Handle task deletion\n  const handleDeleteTask = async taskId => {\n    try {\n      await axios.delete(`http://localhost:8000/tasks/${taskId}/`);\n      setTasks(prevTasks => prevTasks.filter(t => t.id !== taskId));\n    } catch (error) {\n      console.error(\"Error deleting task:\", error);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Task Manager\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(TaskInput, {\n      onCreate: handleCreateTask\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(VoiceInput, {\n      onCreate: handleCreateTask\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(TaskList, {\n      tasks: tasks,\n      onCompleteTask: handleCompleteTask,\n      onDeleteTask: handleDeleteTask\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 67,\n    columnNumber: 5\n  }, this);\n};\n_s(TaskManager, \"bBd6yqkqV9dlkj9ENgRyXKaiXpk=\");\n_c = TaskManager;\nexport default TaskManager;\nvar _c;\n$RefreshReg$(_c, \"TaskManager\");","map":{"version":3,"names":["React","useState","useEffect","axios","TaskInput","VoiceInput","TaskList","jsxDEV","_jsxDEV","TaskManager","_s","tasks","setTasks","fetchTasks","response","get","data","error","console","socket","WebSocket","onmessage","event","task","JSON","parse","prevTasks","close","handleCreateTask","newTask","handleCompleteTask","taskId","find","t","id","updatedTask","completed","put","map","handleDeleteTask","delete","filter","children","fileName","_jsxFileName","lineNumber","columnNumber","onCreate","onCompleteTask","onDeleteTask","_c","$RefreshReg$"],"sources":["/Users/shravanichandratre/Desktop/smart-task-manager/frontend/smart-task-manager-ui/src/components/TaskManager.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport TaskInput from './TaskInput';\nimport VoiceInput from './VoiceInput';\nimport TaskList from './TaskList';\n\nconst TaskManager = () => {\n  const [tasks, setTasks] = useState([]);\n\n  // Fetch tasks from backend on component mount\n  useEffect(() => {\n    const fetchTasks = async () => {\n      try {\n        const response = await axios.get('http://localhost:8000/tasks/');\n        setTasks(response.data);\n      } catch (error) {\n        console.error(\"Error fetching tasks:\", error);\n      }\n    };\n    fetchTasks();\n\n    // WebSocket for real-time updates\n    const socket = new WebSocket('ws://localhost:8000/ws/tasks');\n    \n    socket.onmessage = (event) => {\n      try {\n        const task = JSON.parse(event.data);\n        setTasks((prevTasks) => [...prevTasks, task]);  // Add new task to the list\n      } catch (error) {\n        console.error(\"Error parsing WebSocket message:\", error);\n      }\n    };\n\n    return () => {\n      socket.close();  // Close WebSocket connection when component unmounts\n    };\n  }, []);\n\n  // Function to add a task after creation (called by TaskInput and VoiceInput)\n  const handleCreateTask = (newTask) => {\n    setTasks((prevTasks) => [...prevTasks, newTask]);\n  };\n\n  // Handle task completion (Example: Toggle completion status)\n  const handleCompleteTask = async (taskId) => {\n    try {\n      const task = tasks.find(t => t.id === taskId);\n      const updatedTask = { ...task, completed: !task.completed };\n      await axios.put(`http://localhost:8000/tasks/${taskId}/`, updatedTask);\n      setTasks((prevTasks) => prevTasks.map(t => (t.id === taskId ? updatedTask : t)));\n    } catch (error) {\n      console.error(\"Error updating task:\", error);\n    }\n  };\n\n  // Handle task deletion\n  const handleDeleteTask = async (taskId) => {\n    try {\n      await axios.delete(`http://localhost:8000/tasks/${taskId}/`);\n      setTasks((prevTasks) => prevTasks.filter(t => t.id !== taskId));\n    } catch (error) {\n      console.error(\"Error deleting task:\", error);\n    }\n  };\n\n  return (\n    <div>\n      <h1>Task Manager</h1>\n      <TaskInput onCreate={handleCreateTask} />\n      <VoiceInput onCreate={handleCreateTask} />\n      <TaskList\n        tasks={tasks}\n        onCompleteTask={handleCompleteTask}\n        onDeleteTask={handleDeleteTask}\n      />\n    </div>\n  );\n};\n\nexport default TaskManager;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}