{"ast":null,"code":"var _jsxFileName = \"/Users/shravanichandratre/Desktop/smart-task-manager/frontend/smart-task-manager-ui/src/App.js\",\n  _s = $RefreshSig$();\n// import React, { useState, useEffect } from 'react';\n// import axios from 'axios';\n// import TaskInput from './components/TaskInput';\n// import VoiceInput from './components/VoiceInput';\n// import TaskList from './components/TaskList';\n\n// const App = () => {\n//   const [tasks, setTasks] = useState([]);\n\n//   // Fetch tasks from the server initially\n//   useEffect(() => {\n//     const fetchTasks = async () => {\n//       try {\n//         const response = await axios.get('http://localhost:8000/tasks/');\n//         setTasks(response.data);\n//       } catch (error) {\n//         console.error(\"Error fetching tasks:\", error);\n//       }\n//     };\n\n//     fetchTasks();\n//   }, []);\n\n//   // Handle task creation (called from TaskInput or VoiceInput)\n//   const handleCreateTask = (newTask) => {\n//     setTasks((prevTasks) => [...prevTasks, newTask]);\n//   };\n\n//   // Handle task completion\n//   const handleCompleteTask = async (taskId) => {\n//     try {\n//       // Find the task to update based on the taskId\n//       const taskToUpdate = tasks.find((task) => task.id === taskId);\n\n//       // Toggle the 'completed' status of the task\n//       const updatedTask = { ...taskToUpdate, completed: !taskToUpdate.completed };\n\n//       // Send a PUT request to the backend to update the task\n//       await axios.put(`http://localhost:8000/tasks/${taskId}`, updatedTask);\n\n//       // Update the local state to reflect the new 'completed' status\n//       setTasks((prevTasks) =>\n//         prevTasks.map((task) =>\n//           task.id === taskId ? { ...task, completed: updatedTask.completed } : task\n//         )\n//       );\n//     } catch (error) {\n//       console.error(\"Error completing task:\", error);\n//     }\n//   };\n\n//   // Handle task deletion\n//   const handleDeleteTask = async (taskId) => {\n//     try {\n//       // Delete task from the backend\n//       await axios.delete(`http://localhost:8000/tasks/${taskId}`);\n\n//       // Update the state locally\n//       setTasks((prevTasks) => prevTasks.filter((task) => task.id !== taskId));\n//     } catch (error) {\n//       console.error(\"Error deleting task:\", error);\n//     }\n//   };\n\n//   return (\n//     <div>\n//       <h1>Task Manager</h1>\n//       <TaskInput onCreate={handleCreateTask} />\n//       <VoiceInput onCreate={handleCreateTask} />\n//       <TaskList\n//         tasks={tasks}\n//         onSelectTask={(task) => console.log(task)}\n\n//         Task={handleCompleteTask}\n//         onDeleteTask={handleDeleteTask}\n//       />\n//     </div>\n//   );\n// };\n\n// export default App;\n\nimport React, { useState, useEffect } from 'react';\nimport TaskInput from './components/TaskInput';\nimport VoiceInput from './components/VoiceInput';\nimport TaskList from './components/TaskList';\nimport { getTasks, createTask, updateTask, deleteTask } from './services/api';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst App = () => {\n  _s();\n  const [tasks, setTasks] = useState([]);\n\n  // Fetch tasks from the server initially\n  useEffect(() => {\n    const fetchTasks = async () => {\n      const tasks = await getTasks();\n      setTasks(tasks);\n    };\n    fetchTasks();\n  }, []);\n\n  // Handle task creation\n  const handleCreateTask = async newTask => {\n    const createdTask = await createTask(newTask);\n    if (createdTask) setTasks(prevTasks => [...prevTasks, createdTask]);\n  };\n\n  // Handle task completion\n  const handleCompleteTask = async taskId => {\n    try {\n      const taskToUpdate = tasks.find(task => task.id === taskId);\n      const updatedTask = {\n        ...taskToUpdate,\n        completed: !taskToUpdate.completed\n      };\n      const response = await updateTask(taskId, updatedTask);\n      if (response) {\n        // Update the state with the new task data from the backend\n        setTasks(prevTasks => prevTasks.map(task => task.id === taskId ? {\n          ...task,\n          completed: response.completed\n        } : task));\n      }\n    } catch (error) {\n      console.error(\"Error completing task:\", error);\n    }\n  };\n\n  // Handle task deletion\n  const handleDeleteTask = async taskId => {\n    const success = await deleteTask(taskId);\n    if (success) setTasks(prevTasks => prevTasks.filter(task => task.id !== taskId));\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Task Manager\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 138,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(TaskInput, {\n      onCreate: handleCreateTask\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 139,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(VoiceInput, {\n      onCreate: handleCreateTask\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 140,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(TaskList, {\n      tasks: tasks,\n      onCompleteTask: handleCompleteTask,\n      onDeleteTask: handleDeleteTask\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 141,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 137,\n    columnNumber: 5\n  }, this);\n};\n_s(App, \"bBd6yqkqV9dlkj9ENgRyXKaiXpk=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","TaskInput","VoiceInput","TaskList","getTasks","createTask","updateTask","deleteTask","jsxDEV","_jsxDEV","App","_s","tasks","setTasks","fetchTasks","handleCreateTask","newTask","createdTask","prevTasks","handleCompleteTask","taskId","taskToUpdate","find","task","id","updatedTask","completed","response","map","error","console","handleDeleteTask","success","filter","children","fileName","_jsxFileName","lineNumber","columnNumber","onCreate","onCompleteTask","onDeleteTask","_c","$RefreshReg$"],"sources":["/Users/shravanichandratre/Desktop/smart-task-manager/frontend/smart-task-manager-ui/src/App.js"],"sourcesContent":["\n\n// import React, { useState, useEffect } from 'react';\n// import axios from 'axios';\n// import TaskInput from './components/TaskInput';\n// import VoiceInput from './components/VoiceInput';\n// import TaskList from './components/TaskList';\n\n// const App = () => {\n//   const [tasks, setTasks] = useState([]);\n\n//   // Fetch tasks from the server initially\n//   useEffect(() => {\n//     const fetchTasks = async () => {\n//       try {\n//         const response = await axios.get('http://localhost:8000/tasks/');\n//         setTasks(response.data);\n//       } catch (error) {\n//         console.error(\"Error fetching tasks:\", error);\n//       }\n//     };\n\n//     fetchTasks();\n//   }, []);\n\n//   // Handle task creation (called from TaskInput or VoiceInput)\n//   const handleCreateTask = (newTask) => {\n//     setTasks((prevTasks) => [...prevTasks, newTask]);\n//   };\n\n//   // Handle task completion\n//   const handleCompleteTask = async (taskId) => {\n//     try {\n//       // Find the task to update based on the taskId\n//       const taskToUpdate = tasks.find((task) => task.id === taskId);\n  \n//       // Toggle the 'completed' status of the task\n//       const updatedTask = { ...taskToUpdate, completed: !taskToUpdate.completed };\n  \n//       // Send a PUT request to the backend to update the task\n//       await axios.put(`http://localhost:8000/tasks/${taskId}`, updatedTask);\n  \n//       // Update the local state to reflect the new 'completed' status\n//       setTasks((prevTasks) =>\n//         prevTasks.map((task) =>\n//           task.id === taskId ? { ...task, completed: updatedTask.completed } : task\n//         )\n//       );\n//     } catch (error) {\n//       console.error(\"Error completing task:\", error);\n//     }\n//   };\n  \n\n//   // Handle task deletion\n//   const handleDeleteTask = async (taskId) => {\n//     try {\n//       // Delete task from the backend\n//       await axios.delete(`http://localhost:8000/tasks/${taskId}`);\n\n//       // Update the state locally\n//       setTasks((prevTasks) => prevTasks.filter((task) => task.id !== taskId));\n//     } catch (error) {\n//       console.error(\"Error deleting task:\", error);\n//     }\n//   };\n\n//   return (\n//     <div>\n//       <h1>Task Manager</h1>\n//       <TaskInput onCreate={handleCreateTask} />\n//       <VoiceInput onCreate={handleCreateTask} />\n//       <TaskList\n//         tasks={tasks}\n//         onSelectTask={(task) => console.log(task)}\n        \n//         Task={handleCompleteTask}\n//         onDeleteTask={handleDeleteTask}\n//       />\n//     </div>\n//   );\n// };\n\n// export default App;\n\nimport React, { useState, useEffect } from 'react';\nimport TaskInput from './components/TaskInput';\nimport VoiceInput from './components/VoiceInput';\nimport TaskList from './components/TaskList';\nimport { getTasks, createTask, updateTask, deleteTask } from './services/api';\n\nconst App = () => {\n  const [tasks, setTasks] = useState([]);\n\n  // Fetch tasks from the server initially\n  useEffect(() => {\n    const fetchTasks = async () => {\n      const tasks = await getTasks();\n      setTasks(tasks);\n    };\n    fetchTasks();\n  }, []);\n\n  // Handle task creation\n  const handleCreateTask = async (newTask) => {\n    const createdTask = await createTask(newTask);\n    if (createdTask) setTasks((prevTasks) => [...prevTasks, createdTask]);\n  };\n\n  // Handle task completion\n  const handleCompleteTask = async (taskId) => {\n    try {\n      const taskToUpdate = tasks.find((task) => task.id === taskId);\n      const updatedTask = { ...taskToUpdate, completed: !taskToUpdate.completed };\n      const response = await updateTask(taskId, updatedTask);\n    \n      if (response) {\n      // Update the state with the new task data from the backend\n        setTasks((prevTasks) =>\n          prevTasks.map((task) =>\n            task.id === taskId ? { ...task, completed: response.completed } : task\n          )\n        );\n      }\n    } catch (error) {\n    console.error(\"Error completing task:\", error);\n  }\n  };\n\n  // Handle task deletion\n  const handleDeleteTask = async (taskId) => {\n    const success = await deleteTask(taskId);\n    if (success) setTasks((prevTasks) => prevTasks.filter((task) => task.id !== taskId));\n  };\n\n  return (\n    <div>\n      <h1>Task Manager</h1>\n      <TaskInput onCreate={handleCreateTask} />\n      <VoiceInput onCreate={handleCreateTask} />\n      <TaskList\n        tasks={tasks}\n        onCompleteTask={handleCompleteTask}\n        onDeleteTask={handleDeleteTask}\n      />\n    </div>\n  );\n};\n\nexport default App;\n"],"mappings":";;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,OAAOC,SAAS,MAAM,wBAAwB;AAC9C,OAAOC,UAAU,MAAM,yBAAyB;AAChD,OAAOC,QAAQ,MAAM,uBAAuB;AAC5C,SAASC,QAAQ,EAAEC,UAAU,EAAEC,UAAU,EAAEC,UAAU,QAAQ,gBAAgB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE9E,MAAMC,GAAG,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAChB,MAAM,CAACC,KAAK,EAAEC,QAAQ,CAAC,GAAGd,QAAQ,CAAC,EAAE,CAAC;;EAEtC;EACAC,SAAS,CAAC,MAAM;IACd,MAAMc,UAAU,GAAG,MAAAA,CAAA,KAAY;MAC7B,MAAMF,KAAK,GAAG,MAAMR,QAAQ,CAAC,CAAC;MAC9BS,QAAQ,CAACD,KAAK,CAAC;IACjB,CAAC;IACDE,UAAU,CAAC,CAAC;EACd,CAAC,EAAE,EAAE,CAAC;;EAEN;EACA,MAAMC,gBAAgB,GAAG,MAAOC,OAAO,IAAK;IAC1C,MAAMC,WAAW,GAAG,MAAMZ,UAAU,CAACW,OAAO,CAAC;IAC7C,IAAIC,WAAW,EAAEJ,QAAQ,CAAEK,SAAS,IAAK,CAAC,GAAGA,SAAS,EAAED,WAAW,CAAC,CAAC;EACvE,CAAC;;EAED;EACA,MAAME,kBAAkB,GAAG,MAAOC,MAAM,IAAK;IAC3C,IAAI;MACF,MAAMC,YAAY,GAAGT,KAAK,CAACU,IAAI,CAAEC,IAAI,IAAKA,IAAI,CAACC,EAAE,KAAKJ,MAAM,CAAC;MAC7D,MAAMK,WAAW,GAAG;QAAE,GAAGJ,YAAY;QAAEK,SAAS,EAAE,CAACL,YAAY,CAACK;MAAU,CAAC;MAC3E,MAAMC,QAAQ,GAAG,MAAMrB,UAAU,CAACc,MAAM,EAAEK,WAAW,CAAC;MAEtD,IAAIE,QAAQ,EAAE;QACd;QACEd,QAAQ,CAAEK,SAAS,IACjBA,SAAS,CAACU,GAAG,CAAEL,IAAI,IACjBA,IAAI,CAACC,EAAE,KAAKJ,MAAM,GAAG;UAAE,GAAGG,IAAI;UAAEG,SAAS,EAAEC,QAAQ,CAACD;QAAU,CAAC,GAAGH,IACpE,CACF,CAAC;MACH;IACF,CAAC,CAAC,OAAOM,KAAK,EAAE;MAChBC,OAAO,CAACD,KAAK,CAAC,wBAAwB,EAAEA,KAAK,CAAC;IAChD;EACA,CAAC;;EAED;EACA,MAAME,gBAAgB,GAAG,MAAOX,MAAM,IAAK;IACzC,MAAMY,OAAO,GAAG,MAAMzB,UAAU,CAACa,MAAM,CAAC;IACxC,IAAIY,OAAO,EAAEnB,QAAQ,CAAEK,SAAS,IAAKA,SAAS,CAACe,MAAM,CAAEV,IAAI,IAAKA,IAAI,CAACC,EAAE,KAAKJ,MAAM,CAAC,CAAC;EACtF,CAAC;EAED,oBACEX,OAAA;IAAAyB,QAAA,gBACEzB,OAAA;MAAAyB,QAAA,EAAI;IAAY;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eACrB7B,OAAA,CAACR,SAAS;MAACsC,QAAQ,EAAExB;IAAiB;MAAAoB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC,eACzC7B,OAAA,CAACP,UAAU;MAACqC,QAAQ,EAAExB;IAAiB;MAAAoB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC,eAC1C7B,OAAA,CAACN,QAAQ;MACPS,KAAK,EAAEA,KAAM;MACb4B,cAAc,EAAErB,kBAAmB;MACnCsB,YAAY,EAAEV;IAAiB;MAAAI,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAChC,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACC,CAAC;AAEV,CAAC;AAAC3B,EAAA,CAxDID,GAAG;AAAAgC,EAAA,GAAHhC,GAAG;AA0DT,eAAeA,GAAG;AAAC,IAAAgC,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}