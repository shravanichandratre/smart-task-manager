{"ast":null,"code":"var _jsxFileName = \"/Users/shravanichandratre/Desktop/smart-task-manager/frontend/smart-task-manager-ui/src/components/TaskList.js\";\n// import React from 'react';\n\n// const TaskList = ({ tasks, onSelectTask, onCompleteTask, onDeleteTask }) => {\n//   return (\n//     <div>\n//       <h2>Task List</h2>\n//       <ul>\n//         {tasks.map((task) => (\n//           <li key={task.id}>\n//             <span \n//               style={{\n//                 textDecoration: task.completed ? 'line-through' : 'none', // Check if the task is completed\n//                 cursor: 'pointer'\n//               }}\n//               onClick={() => onSelectTask(task)} // Ensure onSelectTask is called here\n//             >\n//               {task.task} {/* Use task instead of description */}\n//             </span>\n//             <button onClick={() => onCompleteTask(task.id)}>\n//               {task.completed ? 'Undo' : 'Complete'} {/* Modify as necessary based on your app state */}\n//             </button>\n//             <button onClick={() => onDeleteTask(task.id)}>Delete</button>\n//           </li>\n//         ))}\n//       </ul>\n//     </div>\n//   );\n// };\n\n// export default TaskList; og working\n\n// import React from 'react';\n\n// const TaskList = ({ tasks, onSelectTask, onCompleteTask, onDeleteTask }) => {\n//   return (\n//     <div>\n//       <h2>Task List</h2>\n//       <ul>\n//         {tasks.map((task) => (\n//           <li key={task.id}>\n//             <span \n//               style={{\n//                 textDecoration: task.completed ? 'line-through' : 'none',\n//                 cursor: 'pointer'\n//               }}\n//               onClick={() => onSelectTask(task)}\n//             >\n//               {task.task}\n//             </span>\n//             <button onClick={() => onCompleteTask(task.id)}>\n//               {task.completed ? 'Undo' : 'Complete'}\n//             </button>\n//             <button onClick={() => onDeleteTask(task.id)}>Delete</button>\n//           </li>\n//         ))}\n//       </ul>\n//     </div>\n//   );\n// };\n\n// export default TaskList;\n\n// TaskList.js\nimport React from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst TaskList = ({\n  tasks,\n  onCompleteTask,\n  onDeleteTask\n}) => /*#__PURE__*/_jsxDEV(\"div\", {\n  children: tasks.map(task => /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"span\", {\n      style: {\n        textDecoration: task.completed ? 'line-through' : 'none'\n      },\n      children: task.task\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: () => onCompleteTask(task.id),\n      children: task.completed ? \"Undo\" : \"Complete\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: () => onDeleteTask(task.id),\n      children: \"Delete\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 9\n    }, this)]\n  }, task.id, true, {\n    fileName: _jsxFileName,\n    lineNumber: 72,\n    columnNumber: 7\n  }, this))\n}, void 0, false, {\n  fileName: _jsxFileName,\n  lineNumber: 70,\n  columnNumber: 3\n}, this);\n_c = TaskList;\nexport default TaskList;\n\n// import React, { useState, useEffect } from 'react';\n\n// function TaskList() {\n//     const [tasks, setTasks] = useState([]);\n//     const [newTask, setNewTask] = useState(\"\");\n\n//     // Fetch tasks when the component mounts\n//     useEffect(() => {\n//         fetch('http://localhost:8000/tasks/')  // Replace with the correct API endpoint\n//             .then(response => response.json())\n//             .then(data => setTasks(data));\n//     }, []); // Empty dependency array means it runs only once after mount\n\n//     // WebSocket connection for real-time updates\n//     useEffect(() => {\n//         const socket = new WebSocket('ws://localhost:8000/ws/tasks');\n\n//         socket.onmessage = (event) => {\n//             console.log(\"Message from server: \", event.data);\n//             // Optionally refresh tasks or show a new task message\n//             fetch('http://localhost:8000/tasks/')  // Fetch updated task list after receiving a new task\n//                 .then(response => response.json())\n//                 .then(data => setTasks(data));  // Update state with new task list\n//         };\n\n//         return () => {\n//             socket.close();  // Clean up the WebSocket connection when the component is unmounted\n//         };\n//     }, []);  // Empty dependency array means it runs only once after mount\n\n//     const handleAddTask = () => {\n//         const task = { task: newTask, completed: false };\n\n//         // Make POST request to add task\n//         fetch('http://localhost:8000/tasks/', {\n//             method: 'POST',\n//             headers: { 'Content-Type': 'application/json' },\n//             body: JSON.stringify(task),\n//         })\n//         .then(response => response.json())\n//         .then(() => {\n//             // After adding the task, fetch the updated task list\n//             fetch('http://localhost:8000/tasks/')\n//                 .then(response => response.json())\n//                 .then(data => setTasks(data));  // Update state with new task list\n//         })\n//         .catch(error => console.error('Error adding task:', error));\n//     };\n\n//     return (\n//         <div>\n//             <input\n//                 type=\"text\"\n//                 value={newTask}\n//                 onChange={(e) => setNewTask(e.target.value)}\n//                 placeholder=\"Add a new task\"\n//             />\n//             <button onClick={handleAddTask}>Add Task</button>\n\n//             <ul>\n//                 {tasks.map(task => (\n//                     <div key={task.id}>\n//                     <p>{task.task} - {task.completed ? \"Completed\" : \"Pending\"}</p>\n//                 </div>\n//                 ))}\n//             </ul>\n//         </div>\n//     );\n// }\n\n// export default TaskList;\nvar _c;\n$RefreshReg$(_c, \"TaskList\");","map":{"version":3,"names":["React","jsxDEV","_jsxDEV","TaskList","tasks","onCompleteTask","onDeleteTask","children","map","task","style","textDecoration","completed","fileName","_jsxFileName","lineNumber","columnNumber","onClick","id","_c","$RefreshReg$"],"sources":["/Users/shravanichandratre/Desktop/smart-task-manager/frontend/smart-task-manager-ui/src/components/TaskList.js"],"sourcesContent":["// import React from 'react';\n\n// const TaskList = ({ tasks, onSelectTask, onCompleteTask, onDeleteTask }) => {\n//   return (\n//     <div>\n//       <h2>Task List</h2>\n//       <ul>\n//         {tasks.map((task) => (\n//           <li key={task.id}>\n//             <span \n//               style={{\n//                 textDecoration: task.completed ? 'line-through' : 'none', // Check if the task is completed\n//                 cursor: 'pointer'\n//               }}\n//               onClick={() => onSelectTask(task)} // Ensure onSelectTask is called here\n//             >\n//               {task.task} {/* Use task instead of description */}\n//             </span>\n//             <button onClick={() => onCompleteTask(task.id)}>\n//               {task.completed ? 'Undo' : 'Complete'} {/* Modify as necessary based on your app state */}\n//             </button>\n//             <button onClick={() => onDeleteTask(task.id)}>Delete</button>\n//           </li>\n//         ))}\n//       </ul>\n//     </div>\n//   );\n// };\n\n// export default TaskList; og working\n\n\n\n// import React from 'react';\n\n// const TaskList = ({ tasks, onSelectTask, onCompleteTask, onDeleteTask }) => {\n//   return (\n//     <div>\n//       <h2>Task List</h2>\n//       <ul>\n//         {tasks.map((task) => (\n//           <li key={task.id}>\n//             <span \n//               style={{\n//                 textDecoration: task.completed ? 'line-through' : 'none',\n//                 cursor: 'pointer'\n//               }}\n//               onClick={() => onSelectTask(task)}\n//             >\n//               {task.task}\n//             </span>\n//             <button onClick={() => onCompleteTask(task.id)}>\n//               {task.completed ? 'Undo' : 'Complete'}\n//             </button>\n//             <button onClick={() => onDeleteTask(task.id)}>Delete</button>\n//           </li>\n//         ))}\n//       </ul>\n//     </div>\n//   );\n// };\n\n// export default TaskList;\n\n\n// TaskList.js\nimport React from 'react';\n\nconst TaskList = ({ tasks, onCompleteTask, onDeleteTask }) => (\n  <div>\n    {tasks.map((task) => (\n      <div key={task.id}>\n        <span style={{ textDecoration: task.completed ? 'line-through' : 'none' }}>\n          {task.task}\n        </span>\n        <button onClick={() => onCompleteTask(task.id)}>\n          {task.completed ? \"Undo\" : \"Complete\"}\n        </button>\n        <button onClick={() => onDeleteTask(task.id)}>Delete</button>\n      </div>\n    ))}\n  </div>\n);\n\nexport default TaskList;\n\n\n\n\n\n// import React, { useState, useEffect } from 'react';\n\n// function TaskList() {\n//     const [tasks, setTasks] = useState([]);\n//     const [newTask, setNewTask] = useState(\"\");\n\n//     // Fetch tasks when the component mounts\n//     useEffect(() => {\n//         fetch('http://localhost:8000/tasks/')  // Replace with the correct API endpoint\n//             .then(response => response.json())\n//             .then(data => setTasks(data));\n//     }, []); // Empty dependency array means it runs only once after mount\n\n//     // WebSocket connection for real-time updates\n//     useEffect(() => {\n//         const socket = new WebSocket('ws://localhost:8000/ws/tasks');\n\n//         socket.onmessage = (event) => {\n//             console.log(\"Message from server: \", event.data);\n//             // Optionally refresh tasks or show a new task message\n//             fetch('http://localhost:8000/tasks/')  // Fetch updated task list after receiving a new task\n//                 .then(response => response.json())\n//                 .then(data => setTasks(data));  // Update state with new task list\n//         };\n\n//         return () => {\n//             socket.close();  // Clean up the WebSocket connection when the component is unmounted\n//         };\n//     }, []);  // Empty dependency array means it runs only once after mount\n\n//     const handleAddTask = () => {\n//         const task = { task: newTask, completed: false };\n\n//         // Make POST request to add task\n//         fetch('http://localhost:8000/tasks/', {\n//             method: 'POST',\n//             headers: { 'Content-Type': 'application/json' },\n//             body: JSON.stringify(task),\n//         })\n//         .then(response => response.json())\n//         .then(() => {\n//             // After adding the task, fetch the updated task list\n//             fetch('http://localhost:8000/tasks/')\n//                 .then(response => response.json())\n//                 .then(data => setTasks(data));  // Update state with new task list\n//         })\n//         .catch(error => console.error('Error adding task:', error));\n//     };\n\n//     return (\n//         <div>\n//             <input\n//                 type=\"text\"\n//                 value={newTask}\n//                 onChange={(e) => setNewTask(e.target.value)}\n//                 placeholder=\"Add a new task\"\n//             />\n//             <button onClick={handleAddTask}>Add Task</button>\n\n//             <ul>\n//                 {tasks.map(task => (\n//                     <div key={task.id}>\n//                     <p>{task.task} - {task.completed ? \"Completed\" : \"Pending\"}</p>\n//                 </div>\n//                 ))}\n//             </ul>\n//         </div>\n//     );\n// }\n\n// export default TaskList;\n\n\n\n"],"mappings":";AAAA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAIA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAGA;AACA,OAAOA,KAAK,MAAM,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE1B,MAAMC,QAAQ,GAAGA,CAAC;EAAEC,KAAK;EAAEC,cAAc;EAAEC;AAAa,CAAC,kBACvDJ,OAAA;EAAAK,QAAA,EACGH,KAAK,CAACI,GAAG,CAAEC,IAAI,iBACdP,OAAA;IAAAK,QAAA,gBACEL,OAAA;MAAMQ,KAAK,EAAE;QAAEC,cAAc,EAAEF,IAAI,CAACG,SAAS,GAAG,cAAc,GAAG;MAAO,CAAE;MAAAL,QAAA,EACvEE,IAAI,CAACA;IAAI;MAAAI,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACN,CAAC,eACPd,OAAA;MAAQe,OAAO,EAAEA,CAAA,KAAMZ,cAAc,CAACI,IAAI,CAACS,EAAE,CAAE;MAAAX,QAAA,EAC5CE,IAAI,CAACG,SAAS,GAAG,MAAM,GAAG;IAAU;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAC/B,CAAC,eACTd,OAAA;MAAQe,OAAO,EAAEA,CAAA,KAAMX,YAAY,CAACG,IAAI,CAACS,EAAE,CAAE;MAAAX,QAAA,EAAC;IAAM;MAAAM,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAQ,CAAC;EAAA,GAPrDP,IAAI,CAACS,EAAE;IAAAL,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAQZ,CACN;AAAC;EAAAH,QAAA,EAAAC,YAAA;EAAAC,UAAA;EAAAC,YAAA;AAAA,OACC,CACN;AAACG,EAAA,GAdIhB,QAAQ;AAgBd,eAAeA,QAAQ;;AAMvB;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AAAA,IAAAgB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}