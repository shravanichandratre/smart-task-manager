{"ast":null,"code":"var _jsxFileName = \"/Users/shravanichandratre/Desktop/smart-task-manager/frontend/smart-task-manager-ui/src/components/TaskInput.js\",\n  _s = $RefreshSig$();\n// import React, { useState } from 'react';\n// import axios from 'axios';\n\n// const TaskInput = ({ onCreate }) => {\n//   const [inputValue, setInputValue] = useState('');\n\n//   const handleSubmit = async (e) => {\n//     e.preventDefault();\n//     if (inputValue.trim()) {\n//       try {\n//         // Send task description to backend\n//         const newTask = { task: inputValue };\n//         const response = await axios.post('http://localhost:8000/tasks/', newTask);\n\n//         // Update the parent component with the new task\n//         onCreate(response.data);  \n//         setInputValue('');  // Reset input field after submitting\n//       } catch (error) {\n//         console.error(\"Error creating task:\", error);\n//       }\n//     }\n//   };\n\n//   return (\n//     <div>\n//       <h2>Text Task Input</h2>\n//       <form onSubmit={handleSubmit}>\n//       <input\n//                 type=\"text\"\n//                 value={newTask}\n//                 onChange={(e) => setNewTask(e.target.value)}\n//                 placeholder=\"Add a new task\"\n//             />\n//             <button onClick={handleAddTask}>Add Task</button>\n//       </form>\n//     </div>\n//   );\n// };\n\n// export default TaskInput;\n\nimport React, { useState, useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction TaskList() {\n  _s();\n  const [tasks, setTasks] = useState([]);\n  const [newTask, setNewTask] = useState(\"\");\n\n  // Fetch tasks when the component mounts\n  useEffect(() => {\n    fetch('http://localhost:8000/tasks/') // Replace with the correct API endpoint\n    .then(response => response.json()).then(data => setTasks(data));\n  }, []); // Empty dependency array means it runs only once after mount\n\n  // WebSocket connection for real-time updates\n  useEffect(() => {\n    const socket = new WebSocket('ws://localhost:8000/ws/tasks');\n    socket.onmessage = event => {\n      console.log(\"Message from server: \", event.data);\n      // Optionally refresh tasks or show a new task message\n      fetch('http://localhost:8000/tasks/') // Fetch updated task list after receiving a new task\n      .then(response => response.json()).then(data => setTasks(data)); // Update state with new task list\n    };\n    return () => {\n      socket.close(); // Clean up the WebSocket connection when the component is unmounted\n    };\n  }, []); // Empty dependency array means it runs only once after mount\n\n  const handleAddTask = () => {\n    const task = {\n      task: newTask,\n      completed: false\n    };\n\n    // Make POST request to add task\n    fetch('http://localhost:8000/tasks/', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(task)\n    }).then(response => response.json()).then(() => {\n      // After adding the task, fetch the updated task list\n      fetch('http://localhost:8000/tasks/').then(response => response.json()).then(data => setTasks(data)); // Update state with new task list\n    }).catch(error => console.error('Error adding task:', error));\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"text\",\n      value: newTask,\n      onChange: e => setNewTask(e.target.value),\n      placeholder: \"Add a new task\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleAddTask,\n      children: \"Add Task\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 93,\n    columnNumber: 9\n  }, this);\n}\n_s(TaskList, \"6pTReirRKU6zFAHqfYHrd7sboTg=\");\n_c = TaskList;\nexport default TaskList;\nvar _c;\n$RefreshReg$(_c, \"TaskList\");","map":{"version":3,"names":["React","useState","useEffect","jsxDEV","_jsxDEV","TaskList","_s","tasks","setTasks","newTask","setNewTask","fetch","then","response","json","data","socket","WebSocket","onmessage","event","console","log","close","handleAddTask","task","completed","method","headers","body","JSON","stringify","catch","error","children","type","value","onChange","e","target","placeholder","fileName","_jsxFileName","lineNumber","columnNumber","onClick","_c","$RefreshReg$"],"sources":["/Users/shravanichandratre/Desktop/smart-task-manager/frontend/smart-task-manager-ui/src/components/TaskInput.js"],"sourcesContent":["// import React, { useState } from 'react';\n// import axios from 'axios';\n\n// const TaskInput = ({ onCreate }) => {\n//   const [inputValue, setInputValue] = useState('');\n\n//   const handleSubmit = async (e) => {\n//     e.preventDefault();\n//     if (inputValue.trim()) {\n//       try {\n//         // Send task description to backend\n//         const newTask = { task: inputValue };\n//         const response = await axios.post('http://localhost:8000/tasks/', newTask);\n\n//         // Update the parent component with the new task\n//         onCreate(response.data);  \n//         setInputValue('');  // Reset input field after submitting\n//       } catch (error) {\n//         console.error(\"Error creating task:\", error);\n//       }\n//     }\n//   };\n\n//   return (\n//     <div>\n//       <h2>Text Task Input</h2>\n//       <form onSubmit={handleSubmit}>\n//       <input\n//                 type=\"text\"\n//                 value={newTask}\n//                 onChange={(e) => setNewTask(e.target.value)}\n//                 placeholder=\"Add a new task\"\n//             />\n//             <button onClick={handleAddTask}>Add Task</button>\n//       </form>\n//     </div>\n//   );\n// };\n\n// export default TaskInput;\n\n\nimport React, { useState, useEffect } from 'react';\n\nfunction TaskList() {\n    const [tasks, setTasks] = useState([]);\n    const [newTask, setNewTask] = useState(\"\");\n\n    // Fetch tasks when the component mounts\n    useEffect(() => {\n        fetch('http://localhost:8000/tasks/')  // Replace with the correct API endpoint\n            .then(response => response.json())\n            .then(data => setTasks(data));\n    }, []); // Empty dependency array means it runs only once after mount\n\n    // WebSocket connection for real-time updates\n    useEffect(() => {\n        const socket = new WebSocket('ws://localhost:8000/ws/tasks');\n\n        socket.onmessage = (event) => {\n            console.log(\"Message from server: \", event.data);\n            // Optionally refresh tasks or show a new task message\n            fetch('http://localhost:8000/tasks/')  // Fetch updated task list after receiving a new task\n                .then(response => response.json())\n                .then(data => setTasks(data));  // Update state with new task list\n        };\n\n        return () => {\n            socket.close();  // Clean up the WebSocket connection when the component is unmounted\n        };\n    }, []);  // Empty dependency array means it runs only once after mount\n\n    const handleAddTask = () => {\n        const task = { task: newTask, completed: false };\n\n        // Make POST request to add task\n        fetch('http://localhost:8000/tasks/', {\n            method: 'POST',\n            headers: { 'Content-Type': 'application/json' },\n            body: JSON.stringify(task),\n        })\n        .then(response => response.json())\n        .then(() => {\n            // After adding the task, fetch the updated task list\n            fetch('http://localhost:8000/tasks/')\n                .then(response => response.json())\n                .then(data => setTasks(data));  // Update state with new task list\n        })\n        .catch(error => console.error('Error adding task:', error));\n    };\n\n    return (\n        <div>\n            <input\n                type=\"text\"\n                value={newTask}\n                onChange={(e) => setNewTask(e.target.value)}\n                placeholder=\"Add a new task\"\n            />\n            <button onClick={handleAddTask}>Add Task</button>\n        </div>\n    );\n}\n\nexport default TaskList;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}