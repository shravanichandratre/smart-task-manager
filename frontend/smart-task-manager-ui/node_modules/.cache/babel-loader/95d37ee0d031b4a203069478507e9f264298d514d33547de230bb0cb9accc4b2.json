{"ast":null,"code":"var _jsxFileName = \"/Users/shravanichandratre/Desktop/smart-task-manager/frontend/smart-task-manager-ui/src/components/TaskList.js\";\nimport React from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst TaskList = ({\n  tasks,\n  onSelectTask,\n  onCompleteTask,\n  onDeleteTask\n}) => {\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Task List\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 6,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n      children: tasks.map(task => /*#__PURE__*/_jsxDEV(\"li\", {\n        children: [/*#__PURE__*/_jsxDEV(\"span\", {\n          style: {\n            textDecoration: task.completed ? 'line-through' : 'none',\n            cursor: 'pointer'\n          },\n          onClick: () => onSelectTask(task),\n          children: task.task\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 10,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => onCompleteTask(task.id),\n          children: task.completed ? 'Undo' : 'Complete'\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 19,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => onDeleteTask(task.id),\n          children: \"Delete\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 22,\n          columnNumber: 13\n        }, this)]\n      }, task.id, true, {\n        fileName: _jsxFileName,\n        lineNumber: 9,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 7,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 5,\n    columnNumber: 5\n  }, this);\n};\n_c = TaskList;\nexport default TaskList;\n\n// import React, { useState, useEffect } from 'react';\n\n// function TaskList() {\n//     const [tasks, setTasks] = useState([]);\n//     const [newTask, setNewTask] = useState(\"\");\n\n//     // Fetch tasks when the component mounts\n//     useEffect(() => {\n//         fetch('http://localhost:8000/tasks/')  // Replace with the correct API endpoint\n//             .then(response => response.json())\n//             .then(data => setTasks(data));\n//     }, []); // Empty dependency array means it runs only once after mount\n\n//     // WebSocket connection for real-time updates\n//     useEffect(() => {\n//         const socket = new WebSocket('ws://localhost:8000/ws/tasks');\n\n//         socket.onmessage = (event) => {\n//             console.log(\"Message from server: \", event.data);\n//             // Optionally refresh tasks or show a new task message\n//             fetch('http://localhost:8000/tasks/')  // Fetch updated task list after receiving a new task\n//                 .then(response => response.json())\n//                 .then(data => setTasks(data));  // Update state with new task list\n//         };\n\n//         return () => {\n//             socket.close();  // Clean up the WebSocket connection when the component is unmounted\n//         };\n//     }, []);  // Empty dependency array means it runs only once after mount\n\n//     const handleAddTask = () => {\n//         const task = { task: newTask, completed: false };\n\n//         // Make POST request to add task\n//         fetch('http://localhost:8000/tasks/', {\n//             method: 'POST',\n//             headers: { 'Content-Type': 'application/json' },\n//             body: JSON.stringify(task),\n//         })\n//         .then(response => response.json())\n//         .then(() => {\n//             // After adding the task, fetch the updated task list\n//             fetch('http://localhost:8000/tasks/')\n//                 .then(response => response.json())\n//                 .then(data => setTasks(data));  // Update state with new task list\n//         })\n//         .catch(error => console.error('Error adding task:', error));\n//     };\n\n//     return (\n//         <div>\n//             <input\n//                 type=\"text\"\n//                 value={newTask}\n//                 onChange={(e) => setNewTask(e.target.value)}\n//                 placeholder=\"Add a new task\"\n//             />\n//             <button onClick={handleAddTask}>Add Task</button>\n\n//             <ul>\n//                 {tasks.map(task => (\n//                     <div key={task.id}>\n//                     <p>{task.task} - {task.completed ? \"Completed\" : \"Pending\"}</p>\n//                 </div>\n//                 ))}\n//             </ul>\n//         </div>\n//     );\n// }\n\n// export default TaskList;\nvar _c;\n$RefreshReg$(_c, \"TaskList\");","map":{"version":3,"names":["React","jsxDEV","_jsxDEV","TaskList","tasks","onSelectTask","onCompleteTask","onDeleteTask","children","fileName","_jsxFileName","lineNumber","columnNumber","map","task","style","textDecoration","completed","cursor","onClick","id","_c","$RefreshReg$"],"sources":["/Users/shravanichandratre/Desktop/smart-task-manager/frontend/smart-task-manager-ui/src/components/TaskList.js"],"sourcesContent":["import React from 'react';\n\nconst TaskList = ({ tasks, onSelectTask, onCompleteTask, onDeleteTask }) => {\n  return (\n    <div>\n      <h2>Task List</h2>\n      <ul>\n        {tasks.map((task) => (\n          <li key={task.id}>\n            <span \n              style={{\n                textDecoration: task.completed ? 'line-through' : 'none',\n                cursor: 'pointer'\n              }}\n              onClick={() => onSelectTask(task)}\n            >\n              {task.task}\n            </span>\n            <button onClick={() => onCompleteTask(task.id)}>\n              {task.completed ? 'Undo' : 'Complete'}\n            </button>\n            <button onClick={() => onDeleteTask(task.id)}>Delete</button>\n          </li>\n        ))}\n      </ul>\n    </div>\n  );\n};\n\nexport default TaskList;\n\n\n\n\n\n// import React, { useState, useEffect } from 'react';\n\n// function TaskList() {\n//     const [tasks, setTasks] = useState([]);\n//     const [newTask, setNewTask] = useState(\"\");\n\n//     // Fetch tasks when the component mounts\n//     useEffect(() => {\n//         fetch('http://localhost:8000/tasks/')  // Replace with the correct API endpoint\n//             .then(response => response.json())\n//             .then(data => setTasks(data));\n//     }, []); // Empty dependency array means it runs only once after mount\n\n//     // WebSocket connection for real-time updates\n//     useEffect(() => {\n//         const socket = new WebSocket('ws://localhost:8000/ws/tasks');\n\n//         socket.onmessage = (event) => {\n//             console.log(\"Message from server: \", event.data);\n//             // Optionally refresh tasks or show a new task message\n//             fetch('http://localhost:8000/tasks/')  // Fetch updated task list after receiving a new task\n//                 .then(response => response.json())\n//                 .then(data => setTasks(data));  // Update state with new task list\n//         };\n\n//         return () => {\n//             socket.close();  // Clean up the WebSocket connection when the component is unmounted\n//         };\n//     }, []);  // Empty dependency array means it runs only once after mount\n\n//     const handleAddTask = () => {\n//         const task = { task: newTask, completed: false };\n\n//         // Make POST request to add task\n//         fetch('http://localhost:8000/tasks/', {\n//             method: 'POST',\n//             headers: { 'Content-Type': 'application/json' },\n//             body: JSON.stringify(task),\n//         })\n//         .then(response => response.json())\n//         .then(() => {\n//             // After adding the task, fetch the updated task list\n//             fetch('http://localhost:8000/tasks/')\n//                 .then(response => response.json())\n//                 .then(data => setTasks(data));  // Update state with new task list\n//         })\n//         .catch(error => console.error('Error adding task:', error));\n//     };\n\n//     return (\n//         <div>\n//             <input\n//                 type=\"text\"\n//                 value={newTask}\n//                 onChange={(e) => setNewTask(e.target.value)}\n//                 placeholder=\"Add a new task\"\n//             />\n//             <button onClick={handleAddTask}>Add Task</button>\n\n//             <ul>\n//                 {tasks.map(task => (\n//                     <div key={task.id}>\n//                     <p>{task.task} - {task.completed ? \"Completed\" : \"Pending\"}</p>\n//                 </div>\n//                 ))}\n//             </ul>\n//         </div>\n//     );\n// }\n\n// export default TaskList;\n\n\n\n"],"mappings":";AAAA,OAAOA,KAAK,MAAM,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE1B,MAAMC,QAAQ,GAAGA,CAAC;EAAEC,KAAK;EAAEC,YAAY;EAAEC,cAAc;EAAEC;AAAa,CAAC,KAAK;EAC1E,oBACEL,OAAA;IAAAM,QAAA,gBACEN,OAAA;MAAAM,QAAA,EAAI;IAAS;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eAClBV,OAAA;MAAAM,QAAA,EACGJ,KAAK,CAACS,GAAG,CAAEC,IAAI,iBACdZ,OAAA;QAAAM,QAAA,gBACEN,OAAA;UACEa,KAAK,EAAE;YACLC,cAAc,EAAEF,IAAI,CAACG,SAAS,GAAG,cAAc,GAAG,MAAM;YACxDC,MAAM,EAAE;UACV,CAAE;UACFC,OAAO,EAAEA,CAAA,KAAMd,YAAY,CAACS,IAAI,CAAE;UAAAN,QAAA,EAEjCM,IAAI,CAACA;QAAI;UAAAL,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACN,CAAC,eACPV,OAAA;UAAQiB,OAAO,EAAEA,CAAA,KAAMb,cAAc,CAACQ,IAAI,CAACM,EAAE,CAAE;UAAAZ,QAAA,EAC5CM,IAAI,CAACG,SAAS,GAAG,MAAM,GAAG;QAAU;UAAAR,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAC/B,CAAC,eACTV,OAAA;UAAQiB,OAAO,EAAEA,CAAA,KAAMZ,YAAY,CAACO,IAAI,CAACM,EAAE,CAAE;UAAAZ,QAAA,EAAC;QAAM;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAQ,CAAC;MAAA,GAbtDE,IAAI,CAACM,EAAE;QAAAX,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAcZ,CACL;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACA,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACF,CAAC;AAEV,CAAC;AAACS,EAAA,GAzBIlB,QAAQ;AA2Bd,eAAeA,QAAQ;;AAMvB;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AAAA,IAAAkB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}