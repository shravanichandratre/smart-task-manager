{"ast":null,"code":"var _jsxFileName = \"/Users/shravanichandratre/Desktop/smart-task-manager/frontend/smart-task-manager-ui/src/components/TaskList.js\",\n  _s = $RefreshSig$();\n// import React from 'react';\n\n// const TaskList = ({ tasks, onSelectTask, onCompleteTask, onDeleteTask }) => {\n//   return (\n//     <div>\n//       <h2>Task List</h2>\n//       <ul>\n//         {tasks.map((task) => (\n//           <li key={task.id}>\n//             <span \n//               style={{\n//                 textDecoration: task.completed ? 'line-through' : 'none', // Check if the task is completed\n//                 cursor: 'pointer'\n//               }}\n//               onClick={() => onSelectTask(task)} // Ensure onSelectTask is called here\n//             >\n//               {task.task} {/* Use task instead of description */}\n//             </span>\n//             <button onClick={() => onCompleteTask(task.id)}>\n//               {task.completed ? 'Undo' : 'Complete'} {/* Modify as necessary based on your app state */}\n//             </button>\n//             <button onClick={() => onDeleteTask(task.id)}>Delete</button>\n//           </li>\n//         ))}\n//       </ul>\n//     </div>\n//   );\n// };\n\n// export default TaskList;\n\nimport React, { useState, useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction TaskList() {\n  _s();\n  const [tasks, setTasks] = useState([]);\n  const [newTask, setNewTask] = useState(\"\");\n\n  // Fetch tasks when the component mounts\n  useEffect(() => {\n    fetch('http://localhost:8000/tasks/') // Replace with the correct API endpoint\n    .then(response => response.json()).then(data => setTasks(data));\n  }, []); // Empty dependency array means it runs only once after mount\n\n  // WebSocket connection for real-time updates\n  useEffect(() => {\n    const socket = new WebSocket('ws://localhost:8000/ws/tasks');\n    socket.onmessage = event => {\n      console.log(\"Message from server: \", event.data);\n      // Optionally refresh tasks or show a new task message\n      fetch('http://localhost:8000/tasks/') // Fetch updated task list after receiving a new task\n      .then(response => response.json()).then(data => setTasks(data)); // Update state with new task list\n    };\n    return () => {\n      socket.close(); // Clean up the WebSocket connection when the component is unmounted\n    };\n  }, []); // Empty dependency array means it runs only once after mount\n\n  const handleAddTask = () => {\n    const task = {\n      task: newTask,\n      completed: false\n    };\n\n    // Make POST request to add task\n    fetch('http://localhost:8000/tasks/', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(task)\n    }).then(response => response.json()).then(() => {\n      // After adding the task, fetch the updated task list\n      fetch('http://localhost:8000/tasks/').then(response => response.json()).then(data => setTasks(data)); // Update state with new task list\n    }).catch(error => console.error('Error adding task:', error));\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Task List\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n      children: tasks.map(task => /*#__PURE__*/_jsxDEV(\"li\", {\n        children: [/*#__PURE__*/_jsxDEV(\"span\", {\n          style: {\n            textDecoration: task.completed ? 'line-through' : 'none',\n            // Check if the task is completed\n            cursor: 'pointer'\n          },\n          onClick: () => onSelectTask(task) // Ensure onSelectTask is called here\n          ,\n          children: [task.task, \" \"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 87,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => onCompleteTask(task.id),\n          children: [task.completed ? 'Undo' : 'Complete', \" \"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 96,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => onDeleteTask(task.id),\n          children: \"Delete\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 99,\n          columnNumber: 13\n        }, this)]\n      }, task.id, true, {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 82,\n    columnNumber: 7\n  }, this);\n}\n_s(TaskList, \"6pTReirRKU6zFAHqfYHrd7sboTg=\");\n_c = TaskList;\nexport default TaskList;\nvar _c;\n$RefreshReg$(_c, \"TaskList\");","map":{"version":3,"names":["React","useState","useEffect","jsxDEV","_jsxDEV","TaskList","_s","tasks","setTasks","newTask","setNewTask","fetch","then","response","json","data","socket","WebSocket","onmessage","event","console","log","close","handleAddTask","task","completed","method","headers","body","JSON","stringify","catch","error","children","fileName","_jsxFileName","lineNumber","columnNumber","map","style","textDecoration","cursor","onClick","onSelectTask","onCompleteTask","id","onDeleteTask","_c","$RefreshReg$"],"sources":["/Users/shravanichandratre/Desktop/smart-task-manager/frontend/smart-task-manager-ui/src/components/TaskList.js"],"sourcesContent":["// import React from 'react';\n\n// const TaskList = ({ tasks, onSelectTask, onCompleteTask, onDeleteTask }) => {\n//   return (\n//     <div>\n//       <h2>Task List</h2>\n//       <ul>\n//         {tasks.map((task) => (\n//           <li key={task.id}>\n//             <span \n//               style={{\n//                 textDecoration: task.completed ? 'line-through' : 'none', // Check if the task is completed\n//                 cursor: 'pointer'\n//               }}\n//               onClick={() => onSelectTask(task)} // Ensure onSelectTask is called here\n//             >\n//               {task.task} {/* Use task instead of description */}\n//             </span>\n//             <button onClick={() => onCompleteTask(task.id)}>\n//               {task.completed ? 'Undo' : 'Complete'} {/* Modify as necessary based on your app state */}\n//             </button>\n//             <button onClick={() => onDeleteTask(task.id)}>Delete</button>\n//           </li>\n//         ))}\n//       </ul>\n//     </div>\n//   );\n// };\n\n// export default TaskList;\n\nimport React, { useState, useEffect } from 'react';\n\nfunction TaskList() {\n    const [tasks, setTasks] = useState([]);\n    const [newTask, setNewTask] = useState(\"\");\n\n    // Fetch tasks when the component mounts\n    useEffect(() => {\n        fetch('http://localhost:8000/tasks/')  // Replace with the correct API endpoint\n            .then(response => response.json())\n            .then(data => setTasks(data));\n    }, []); // Empty dependency array means it runs only once after mount\n\n    // WebSocket connection for real-time updates\n    useEffect(() => {\n        const socket = new WebSocket('ws://localhost:8000/ws/tasks');\n\n        socket.onmessage = (event) => {\n            console.log(\"Message from server: \", event.data);\n            // Optionally refresh tasks or show a new task message\n            fetch('http://localhost:8000/tasks/')  // Fetch updated task list after receiving a new task\n                .then(response => response.json())\n                .then(data => setTasks(data));  // Update state with new task list\n        };\n\n        return () => {\n            socket.close();  // Clean up the WebSocket connection when the component is unmounted\n        };\n    }, []);  // Empty dependency array means it runs only once after mount\n\n    const handleAddTask = () => {\n        const task = { task: newTask, completed: false };\n\n        // Make POST request to add task\n        fetch('http://localhost:8000/tasks/', {\n            method: 'POST',\n            headers: { 'Content-Type': 'application/json' },\n            body: JSON.stringify(task),\n        })\n        .then(response => response.json())\n        .then(() => {\n            // After adding the task, fetch the updated task list\n            fetch('http://localhost:8000/tasks/')\n                .then(response => response.json())\n                .then(data => setTasks(data));  // Update state with new task list\n        })\n        .catch(error => console.error('Error adding task:', error));\n    };\n\n    return (\n      <div>\n      <h2>Task List</h2>\n      <ul>\n        {tasks.map((task) => (\n          <li key={task.id}>\n            <span \n              style={{\n                textDecoration: task.completed ? 'line-through' : 'none', // Check if the task is completed\n                cursor: 'pointer'\n              }}\n              onClick={() => onSelectTask(task)} // Ensure onSelectTask is called here\n            >\n              {task.task} {/* Use task instead of description */}\n            </span>\n            <button onClick={() => onCompleteTask(task.id)}>\n              {task.completed ? 'Undo' : 'Complete'} {/* Modify as necessary based on your app state */}\n            </button>\n            <button onClick={() => onDeleteTask(task.id)}>Delete</button>\n          </li>\n        ))}\n      </ul>\n    </div>\n  );\n}\n\nexport default TaskList;\n\n\n\n"],"mappings":";;AAAA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEnD,SAASC,QAAQA,CAAA,EAAG;EAAAC,EAAA;EAChB,MAAM,CAACC,KAAK,EAAEC,QAAQ,CAAC,GAAGP,QAAQ,CAAC,EAAE,CAAC;EACtC,MAAM,CAACQ,OAAO,EAAEC,UAAU,CAAC,GAAGT,QAAQ,CAAC,EAAE,CAAC;;EAE1C;EACAC,SAAS,CAAC,MAAM;IACZS,KAAK,CAAC,8BAA8B,CAAC,CAAE;IAAA,CAClCC,IAAI,CAACC,QAAQ,IAAIA,QAAQ,CAACC,IAAI,CAAC,CAAC,CAAC,CACjCF,IAAI,CAACG,IAAI,IAAIP,QAAQ,CAACO,IAAI,CAAC,CAAC;EACrC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC;;EAER;EACAb,SAAS,CAAC,MAAM;IACZ,MAAMc,MAAM,GAAG,IAAIC,SAAS,CAAC,8BAA8B,CAAC;IAE5DD,MAAM,CAACE,SAAS,GAAIC,KAAK,IAAK;MAC1BC,OAAO,CAACC,GAAG,CAAC,uBAAuB,EAAEF,KAAK,CAACJ,IAAI,CAAC;MAChD;MACAJ,KAAK,CAAC,8BAA8B,CAAC,CAAE;MAAA,CAClCC,IAAI,CAACC,QAAQ,IAAIA,QAAQ,CAACC,IAAI,CAAC,CAAC,CAAC,CACjCF,IAAI,CAACG,IAAI,IAAIP,QAAQ,CAACO,IAAI,CAAC,CAAC,CAAC,CAAE;IACxC,CAAC;IAED,OAAO,MAAM;MACTC,MAAM,CAACM,KAAK,CAAC,CAAC,CAAC,CAAE;IACrB,CAAC;EACL,CAAC,EAAE,EAAE,CAAC,CAAC,CAAE;;EAET,MAAMC,aAAa,GAAGA,CAAA,KAAM;IACxB,MAAMC,IAAI,GAAG;MAAEA,IAAI,EAAEf,OAAO;MAAEgB,SAAS,EAAE;IAAM,CAAC;;IAEhD;IACAd,KAAK,CAAC,8BAA8B,EAAE;MAClCe,MAAM,EAAE,MAAM;MACdC,OAAO,EAAE;QAAE,cAAc,EAAE;MAAmB,CAAC;MAC/CC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAACN,IAAI;IAC7B,CAAC,CAAC,CACDZ,IAAI,CAACC,QAAQ,IAAIA,QAAQ,CAACC,IAAI,CAAC,CAAC,CAAC,CACjCF,IAAI,CAAC,MAAM;MACR;MACAD,KAAK,CAAC,8BAA8B,CAAC,CAChCC,IAAI,CAACC,QAAQ,IAAIA,QAAQ,CAACC,IAAI,CAAC,CAAC,CAAC,CACjCF,IAAI,CAACG,IAAI,IAAIP,QAAQ,CAACO,IAAI,CAAC,CAAC,CAAC,CAAE;IACxC,CAAC,CAAC,CACDgB,KAAK,CAACC,KAAK,IAAIZ,OAAO,CAACY,KAAK,CAAC,oBAAoB,EAAEA,KAAK,CAAC,CAAC;EAC/D,CAAC;EAED,oBACE5B,OAAA;IAAA6B,QAAA,gBACA7B,OAAA;MAAA6B,QAAA,EAAI;IAAS;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eAClBjC,OAAA;MAAA6B,QAAA,EACG1B,KAAK,CAAC+B,GAAG,CAAEd,IAAI,iBACdpB,OAAA;QAAA6B,QAAA,gBACE7B,OAAA;UACEmC,KAAK,EAAE;YACLC,cAAc,EAAEhB,IAAI,CAACC,SAAS,GAAG,cAAc,GAAG,MAAM;YAAE;YAC1DgB,MAAM,EAAE;UACV,CAAE;UACFC,OAAO,EAAEA,CAAA,KAAMC,YAAY,CAACnB,IAAI,CAAE,CAAC;UAAA;UAAAS,QAAA,GAElCT,IAAI,CAACA,IAAI,EAAC,GAAC;QAAA;UAAAU,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACR,CAAC,eACPjC,OAAA;UAAQsC,OAAO,EAAEA,CAAA,KAAME,cAAc,CAACpB,IAAI,CAACqB,EAAE,CAAE;UAAAZ,QAAA,GAC5CT,IAAI,CAACC,SAAS,GAAG,MAAM,GAAG,UAAU,EAAC,GAAC;QAAA;UAAAS,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACjC,CAAC,eACTjC,OAAA;UAAQsC,OAAO,EAAEA,CAAA,KAAMI,YAAY,CAACtB,IAAI,CAACqB,EAAE,CAAE;UAAAZ,QAAA,EAAC;QAAM;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAQ,CAAC;MAAA,GAbtDb,IAAI,CAACqB,EAAE;QAAAX,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAcZ,CACL;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACA,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACF,CAAC;AAEV;AAAC/B,EAAA,CAvEQD,QAAQ;AAAA0C,EAAA,GAAR1C,QAAQ;AAyEjB,eAAeA,QAAQ;AAAC,IAAA0C,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}