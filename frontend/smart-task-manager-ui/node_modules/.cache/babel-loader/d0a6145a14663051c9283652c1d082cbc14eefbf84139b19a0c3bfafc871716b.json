{"ast":null,"code":"var _jsxFileName = \"/Users/shravanichandratre/Desktop/smart-task-manager/frontend/smart-task-manager-ui/src/components/VoiceInput.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport axios from 'axios';\nimport SpeechRecognition, { useSpeechRecognition } from 'react-speech-recognition';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst VoiceInput = ({\n  onCreate\n}) => {\n  _s();\n  const {\n    transcript,\n    listening,\n    resetTranscript,\n    browserSupportsSpeechRecognition\n  } = useSpeechRecognition();\n  const [isListening, setIsListening] = useState(false);\n  if (!browserSupportsSpeechRecognition) {\n    return /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Browser doesn't support speech recognition.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 10,\n      columnNumber: 12\n    }, this);\n  }\n  const toggleListening = () => {\n    if (isListening) {\n      SpeechRecognition.stopListening();\n      setIsListening(false);\n    } else {\n      SpeechRecognition.startListening({\n        continuous: true\n      });\n      setIsListening(true);\n    }\n  };\n  const handleSubmit = async e => {\n    e.preventDefault();\n    if (transcript.trim()) {\n      try {\n        // Send task description (transcript) to backend\n        const newTask = {\n          task: transcript\n        };\n        const response = await axios.post('http://localhost:8000/tasks/', newTask);\n\n        // Update the parent component with the new task\n        onCreate(response.data);\n        resetTranscript(); // Reset transcript after submitting the task\n      } catch (error) {\n        console.error(\"Error creating task:\", error);\n      }\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Voice Task Input\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: toggleListening,\n      children: isListening ? 'Stop Listening' : 'Start Listening'\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: handleSubmit,\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        value: transcript,\n        readOnly: true,\n        placeholder: \"Say your task\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        children: \"Add Task\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 41,\n    columnNumber: 5\n  }, this);\n};\n_s(VoiceInput, \"DN0WRJn4oJQwUPCMVw3blxJLToI=\", false, function () {\n  return [useSpeechRecognition];\n});\n_c = VoiceInput;\nexport default VoiceInput;\nvar _c;\n$RefreshReg$(_c, \"VoiceInput\");","map":{"version":3,"names":["React","useState","axios","SpeechRecognition","useSpeechRecognition","jsxDEV","_jsxDEV","VoiceInput","onCreate","_s","transcript","listening","resetTranscript","browserSupportsSpeechRecognition","isListening","setIsListening","children","fileName","_jsxFileName","lineNumber","columnNumber","toggleListening","stopListening","startListening","continuous","handleSubmit","e","preventDefault","trim","newTask","task","response","post","data","error","console","onClick","onSubmit","type","value","readOnly","placeholder","_c","$RefreshReg$"],"sources":["/Users/shravanichandratre/Desktop/smart-task-manager/frontend/smart-task-manager-ui/src/components/VoiceInput.js"],"sourcesContent":["import React, { useState } from 'react';\nimport axios from 'axios';\nimport SpeechRecognition, { useSpeechRecognition } from 'react-speech-recognition';\n\nconst VoiceInput = ({ onCreate }) => {\n  const { transcript, listening, resetTranscript, browserSupportsSpeechRecognition } = useSpeechRecognition();\n  const [isListening, setIsListening] = useState(false);\n\n  if (!browserSupportsSpeechRecognition) {\n    return <p>Browser doesn't support speech recognition.</p>;\n  }\n\n  const toggleListening = () => {\n    if (isListening) {\n      SpeechRecognition.stopListening();\n      setIsListening(false);\n    } else {\n      SpeechRecognition.startListening({ continuous: true });\n      setIsListening(true);\n    }\n  };\n\n  const handleSubmit = async (e) => {\n    e.preventDefault();\n    if (transcript.trim()) {\n      try {\n        // Send task description (transcript) to backend\n        const newTask = { task: transcript };\n        const response = await axios.post('http://localhost:8000/tasks/', newTask);\n\n        // Update the parent component with the new task\n        onCreate(response.data);\n        resetTranscript();  // Reset transcript after submitting the task\n      } catch (error) {\n        console.error(\"Error creating task:\", error);\n      }\n    }\n  };\n\n  return (\n    <div>\n      <h2>Voice Task Input</h2>\n      <button onClick={toggleListening}>\n        {isListening ? 'Stop Listening' : 'Start Listening'}\n      </button>\n      <form onSubmit={handleSubmit}>\n        <input\n          type=\"text\"\n          value={transcript}\n          readOnly\n          placeholder=\"Say your task\"\n        />\n        <button type=\"submit\">Add Task</button>\n      </form>\n    </div>\n  );\n};\n\nexport default VoiceInput;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AACvC,OAAOC,KAAK,MAAM,OAAO;AACzB,OAAOC,iBAAiB,IAAIC,oBAAoB,QAAQ,0BAA0B;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEnF,MAAMC,UAAU,GAAGA,CAAC;EAAEC;AAAS,CAAC,KAAK;EAAAC,EAAA;EACnC,MAAM;IAAEC,UAAU;IAAEC,SAAS;IAAEC,eAAe;IAAEC;EAAiC,CAAC,GAAGT,oBAAoB,CAAC,CAAC;EAC3G,MAAM,CAACU,WAAW,EAAEC,cAAc,CAAC,GAAGd,QAAQ,CAAC,KAAK,CAAC;EAErD,IAAI,CAACY,gCAAgC,EAAE;IACrC,oBAAOP,OAAA;MAAAU,QAAA,EAAG;IAA2C;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAG,CAAC;EAC3D;EAEA,MAAMC,eAAe,GAAGA,CAAA,KAAM;IAC5B,IAAIP,WAAW,EAAE;MACfX,iBAAiB,CAACmB,aAAa,CAAC,CAAC;MACjCP,cAAc,CAAC,KAAK,CAAC;IACvB,CAAC,MAAM;MACLZ,iBAAiB,CAACoB,cAAc,CAAC;QAAEC,UAAU,EAAE;MAAK,CAAC,CAAC;MACtDT,cAAc,CAAC,IAAI,CAAC;IACtB;EACF,CAAC;EAED,MAAMU,YAAY,GAAG,MAAOC,CAAC,IAAK;IAChCA,CAAC,CAACC,cAAc,CAAC,CAAC;IAClB,IAAIjB,UAAU,CAACkB,IAAI,CAAC,CAAC,EAAE;MACrB,IAAI;QACF;QACA,MAAMC,OAAO,GAAG;UAAEC,IAAI,EAAEpB;QAAW,CAAC;QACpC,MAAMqB,QAAQ,GAAG,MAAM7B,KAAK,CAAC8B,IAAI,CAAC,8BAA8B,EAAEH,OAAO,CAAC;;QAE1E;QACArB,QAAQ,CAACuB,QAAQ,CAACE,IAAI,CAAC;QACvBrB,eAAe,CAAC,CAAC,CAAC,CAAE;MACtB,CAAC,CAAC,OAAOsB,KAAK,EAAE;QACdC,OAAO,CAACD,KAAK,CAAC,sBAAsB,EAAEA,KAAK,CAAC;MAC9C;IACF;EACF,CAAC;EAED,oBACE5B,OAAA;IAAAU,QAAA,gBACEV,OAAA;MAAAU,QAAA,EAAI;IAAgB;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eACzBd,OAAA;MAAQ8B,OAAO,EAAEf,eAAgB;MAAAL,QAAA,EAC9BF,WAAW,GAAG,gBAAgB,GAAG;IAAiB;MAAAG,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAC7C,CAAC,eACTd,OAAA;MAAM+B,QAAQ,EAAEZ,YAAa;MAAAT,QAAA,gBAC3BV,OAAA;QACEgC,IAAI,EAAC,MAAM;QACXC,KAAK,EAAE7B,UAAW;QAClB8B,QAAQ;QACRC,WAAW,EAAC;MAAe;QAAAxB,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAC5B,CAAC,eACFd,OAAA;QAAQgC,IAAI,EAAC,QAAQ;QAAAtB,QAAA,EAAC;MAAQ;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAQ,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACnC,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACJ,CAAC;AAEV,CAAC;AAACX,EAAA,CApDIF,UAAU;EAAA,QACuEH,oBAAoB;AAAA;AAAAsC,EAAA,GADrGnC,UAAU;AAsDhB,eAAeA,UAAU;AAAC,IAAAmC,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}