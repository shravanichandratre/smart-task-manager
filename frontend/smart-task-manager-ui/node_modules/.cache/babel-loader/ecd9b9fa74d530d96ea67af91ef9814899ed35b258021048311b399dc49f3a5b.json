{"ast":null,"code":"// import React, { useState, useEffect } from 'react';\n// import TaskInput from './components/TaskInput';\n// import VoiceInput from './components/VoiceInput';\n// import TaskList from './components/TaskList';\n// import TaskDetail from './components/TaskDetail';\n// import { getTasks, createTask, updateTask, deleteTask } from './services/api';\n// import axios from 'axios';\n\n// const App = () => {\n//   const [tasks, setTasks] = useState([]);\n//   const [selectedTask, setSelectedTask] = useState(null); // Selected task state\n//   const [loading, setLoading] = useState(true);\n\n//   useEffect(() => {\n//     const fetchTasks = async () => {\n//       try {\n//         const data = await getTasks();\n//         setTasks(data);\n//       } catch (error) {\n//         console.error(\"Error fetching tasks:\", error);\n//       } finally {\n//         setLoading(false);\n//       }\n//     };\n//     fetchTasks();\n//   }, []);\n\n//   const handleCreateTask = async (taskDescription) => {\n//     const newTask = { task: taskDescription}; // Only task (no task_description)\n//     try {\n//       const response = await axios.post('http://localhost:8000/tasks/', newTask);\n//       setTasks([...tasks, response.data]);  // Add the newly created task to the list\n//     } catch (error) {\n//       console.error(\"Error creating task:\", error);\n//     }\n//   };\n\n//   const handleCompleteTask = async (taskId) => {\n//     try {\n//       const updatedTask = await updateTask(taskId, { completed: true });\n//       setTasks(tasks.map(task => (task.id === taskId ? updatedTask : task)));\n//     } catch (error) {\n//       console.error(\"Error completing task:\", error);\n//     }\n//   };\n\n//   const handleDeleteTask = async (taskId) => {\n//     try {\n//       await deleteTask(taskId);\n//       setTasks(tasks.filter(task => task.id !== taskId));\n//     } catch (error) {\n//       console.error(\"Error deleting task:\", error);\n//     }\n//   };\n\n//   return (\n//     <div>\n//       <h1>Task Management App</h1>\n//       <VoiceInput onCreate={handleCreateTask} />\n//       <TaskInput onCreate={handleCreateTask} />\n\n//       {loading ? (\n//         <p>Loading tasks...</p>\n//       ) : (\n//         <div style={{ display: 'flex', gap: '20px' }}>\n//           <TaskList\n//             tasks={tasks}\n//             onSelectTask={setSelectedTask}  // Set selected task here\n//             onCompleteTask={handleCompleteTask}\n//             onDeleteTask={handleDeleteTask}\n//           />\n//           <TaskDetail task={selectedTask} />  \n//         </div>\n//       )}\n//     </div>\n//   );\n// };\n\n// export default App;","map":{"version":3,"names":[],"sources":["/Users/shravanichandratre/Desktop/smart-task-manager/frontend/smart-task-manager-ui/src/App.js"],"sourcesContent":["// import React, { useState, useEffect } from 'react';\n// import TaskInput from './components/TaskInput';\n// import VoiceInput from './components/VoiceInput';\n// import TaskList from './components/TaskList';\n// import TaskDetail from './components/TaskDetail';\n// import { getTasks, createTask, updateTask, deleteTask } from './services/api';\n// import axios from 'axios';\n\n// const App = () => {\n//   const [tasks, setTasks] = useState([]);\n//   const [selectedTask, setSelectedTask] = useState(null); // Selected task state\n//   const [loading, setLoading] = useState(true);\n\n//   useEffect(() => {\n//     const fetchTasks = async () => {\n//       try {\n//         const data = await getTasks();\n//         setTasks(data);\n//       } catch (error) {\n//         console.error(\"Error fetching tasks:\", error);\n//       } finally {\n//         setLoading(false);\n//       }\n//     };\n//     fetchTasks();\n//   }, []);\n\n  \n//   const handleCreateTask = async (taskDescription) => {\n//     const newTask = { task: taskDescription}; // Only task (no task_description)\n//     try {\n//       const response = await axios.post('http://localhost:8000/tasks/', newTask);\n//       setTasks([...tasks, response.data]);  // Add the newly created task to the list\n//     } catch (error) {\n//       console.error(\"Error creating task:\", error);\n//     }\n//   };\n  \n\n//   const handleCompleteTask = async (taskId) => {\n//     try {\n//       const updatedTask = await updateTask(taskId, { completed: true });\n//       setTasks(tasks.map(task => (task.id === taskId ? updatedTask : task)));\n//     } catch (error) {\n//       console.error(\"Error completing task:\", error);\n//     }\n//   };\n\n//   const handleDeleteTask = async (taskId) => {\n//     try {\n//       await deleteTask(taskId);\n//       setTasks(tasks.filter(task => task.id !== taskId));\n//     } catch (error) {\n//       console.error(\"Error deleting task:\", error);\n//     }\n//   };\n\n//   return (\n//     <div>\n//       <h1>Task Management App</h1>\n//       <VoiceInput onCreate={handleCreateTask} />\n//       <TaskInput onCreate={handleCreateTask} />\n      \n//       {loading ? (\n//         <p>Loading tasks...</p>\n//       ) : (\n//         <div style={{ display: 'flex', gap: '20px' }}>\n//           <TaskList\n//             tasks={tasks}\n//             onSelectTask={setSelectedTask}  // Set selected task here\n//             onCompleteTask={handleCompleteTask}\n//             onDeleteTask={handleDeleteTask}\n//           />\n//           <TaskDetail task={selectedTask} />  \n//         </div>\n//       )}\n//     </div>\n//   );\n// };\n\n// export default App;\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}