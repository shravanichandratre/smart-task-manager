{"ast":null,"code":"var _jsxFileName = \"/Users/shravanichandratre/Desktop/smart-task-manager/frontend/smart-task-manager-ui/src/App.js\",\n  _s = $RefreshSig$();\n// import React, { useState, useEffect } from 'react';\n// import TaskInput from './components/TaskInput';\n// import VoiceInput from './components/VoiceInput';\n// import TaskList from './components/TaskList';\n// import TaskDetail from './components/TaskDetail';\n// import { getTasks, createTask, updateTask, deleteTask } from './services/api';\n// import axios from 'axios';\n\n// const App = () => {\n//   const [tasks, setTasks] = useState([]);\n//   const [selectedTask, setSelectedTask] = useState(null); // Selected task state\n//   const [loading, setLoading] = useState(true);\n\n//   useEffect(() => {\n//     const fetchTasks = async () => {\n//       try {\n//         const data = await getTasks();\n//         setTasks(data);\n//       } catch (error) {\n//         console.error(\"Error fetching tasks:\", error);\n//       } finally {\n//         setLoading(false);\n//       }\n//     };\n//     fetchTasks();\n//   }, []);\n\n//   const handleCreateTask = async (taskDescription) => {\n//     const newTask = { task: taskDescription}; // Only task (no task_description)\n//     try {\n//       const response = await axios.post('http://localhost:8000/tasks/', newTask);\n//       setTasks([...tasks, response.data]);  // Add the newly created task to the list\n//     } catch (error) {\n//       console.error(\"Error creating task:\", error);\n//     }\n//   };\n\n//   const handleCompleteTask = async (taskId) => {\n//     try {\n//       const updatedTask = await updateTask(taskId, { completed: true });\n//       setTasks(tasks.map(task => (task.id === taskId ? updatedTask : task)));\n//     } catch (error) {\n//       console.error(\"Error completing task:\", error);\n//     }\n//   };\n\n//   const handleDeleteTask = async (taskId) => {\n//     try {\n//       await deleteTask(taskId);\n//       setTasks(tasks.filter(task => task.id !== taskId));\n//     } catch (error) {\n//       console.error(\"Error deleting task:\", error);\n//     }\n//   };\n\n//   return (\n//     <div>\n//       <h1>Task Management App</h1>\n//       <VoiceInput onCreate={handleCreateTask} />\n//       <TaskInput onCreate={handleCreateTask} />\n\n//       {loading ? (\n//         <p>Loading tasks...</p>\n//       ) : (\n//         <div style={{ display: 'flex', gap: '20px' }}>\n//           <TaskList\n//             tasks={tasks}\n//             onSelectTask={setSelectedTask}  // Set selected task here\n//             onCompleteTask={handleCompleteTask}\n//             onDeleteTask={handleDeleteTask}\n//           />\n//           <TaskDetail task={selectedTask} />  \n//         </div>\n//       )}\n//     </div>\n//   );\n// };\n\n// export default App;\n\nimport React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport TaskInput from './TaskInput';\nimport VoiceInput from './VoiceInput';\nimport TaskList from './TaskList';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst App = () => {\n  _s();\n  const [tasks, setTasks] = useState([]);\n\n  // Fetch tasks from the server initially\n  useEffect(() => {\n    const fetchTasks = async () => {\n      try {\n        const response = await axios.get('http://localhost:8000/tasks/');\n        setTasks(response.data);\n      } catch (error) {\n        console.error(\"Error fetching tasks:\", error);\n      }\n    };\n    fetchTasks();\n  }, []);\n\n  // Handle task creation (called from TaskInput or VoiceInput)\n  const handleCreateTask = newTask => {\n    setTasks(prevTasks => [...prevTasks, newTask]);\n  };\n\n  // Handle task completion\n  const handleCompleteTask = async taskId => {\n    try {\n      const taskToUpdate = tasks.find(task => task.id === taskId);\n      const updatedTask = {\n        ...taskToUpdate,\n        completed: !taskToUpdate.completed\n      };\n\n      // Update the task in the backend\n      await axios.put(`http://localhost:8000/tasks/${taskId}`, updatedTask);\n\n      // Update the state locally\n      setTasks(prevTasks => prevTasks.map(task => task.id === taskId ? {\n        ...task,\n        completed: updatedTask.completed\n      } : task));\n    } catch (error) {\n      console.error(\"Error completing task:\", error);\n    }\n  };\n\n  // Handle task deletion\n  const handleDeleteTask = async taskId => {\n    try {\n      // Delete task from the backend\n      await axios.delete(`http://localhost:8000/tasks/${taskId}`);\n\n      // Update the state locally\n      setTasks(prevTasks => prevTasks.filter(task => task.id !== taskId));\n    } catch (error) {\n      console.error(\"Error deleting task:\", error);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Task Manager\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 146,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(TaskInput, {\n      onCreate: handleCreateTask\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 147,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(VoiceInput, {\n      onCreate: handleCreateTask\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 148,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(TaskList, {\n      tasks: tasks,\n      onSelectTask: task => console.log(task),\n      onCompleteTask: handleCompleteTask,\n      onDeleteTask: handleDeleteTask\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 149,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 145,\n    columnNumber: 5\n  }, this);\n};\n_s(App, \"bBd6yqkqV9dlkj9ENgRyXKaiXpk=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","axios","TaskInput","VoiceInput","TaskList","jsxDEV","_jsxDEV","App","_s","tasks","setTasks","fetchTasks","response","get","data","error","console","handleCreateTask","newTask","prevTasks","handleCompleteTask","taskId","taskToUpdate","find","task","id","updatedTask","completed","put","map","handleDeleteTask","delete","filter","children","fileName","_jsxFileName","lineNumber","columnNumber","onCreate","onSelectTask","log","onCompleteTask","onDeleteTask","_c","$RefreshReg$"],"sources":["/Users/shravanichandratre/Desktop/smart-task-manager/frontend/smart-task-manager-ui/src/App.js"],"sourcesContent":["// import React, { useState, useEffect } from 'react';\n// import TaskInput from './components/TaskInput';\n// import VoiceInput from './components/VoiceInput';\n// import TaskList from './components/TaskList';\n// import TaskDetail from './components/TaskDetail';\n// import { getTasks, createTask, updateTask, deleteTask } from './services/api';\n// import axios from 'axios';\n\n// const App = () => {\n//   const [tasks, setTasks] = useState([]);\n//   const [selectedTask, setSelectedTask] = useState(null); // Selected task state\n//   const [loading, setLoading] = useState(true);\n\n//   useEffect(() => {\n//     const fetchTasks = async () => {\n//       try {\n//         const data = await getTasks();\n//         setTasks(data);\n//       } catch (error) {\n//         console.error(\"Error fetching tasks:\", error);\n//       } finally {\n//         setLoading(false);\n//       }\n//     };\n//     fetchTasks();\n//   }, []);\n\n  \n//   const handleCreateTask = async (taskDescription) => {\n//     const newTask = { task: taskDescription}; // Only task (no task_description)\n//     try {\n//       const response = await axios.post('http://localhost:8000/tasks/', newTask);\n//       setTasks([...tasks, response.data]);  // Add the newly created task to the list\n//     } catch (error) {\n//       console.error(\"Error creating task:\", error);\n//     }\n//   };\n  \n\n//   const handleCompleteTask = async (taskId) => {\n//     try {\n//       const updatedTask = await updateTask(taskId, { completed: true });\n//       setTasks(tasks.map(task => (task.id === taskId ? updatedTask : task)));\n//     } catch (error) {\n//       console.error(\"Error completing task:\", error);\n//     }\n//   };\n\n//   const handleDeleteTask = async (taskId) => {\n//     try {\n//       await deleteTask(taskId);\n//       setTasks(tasks.filter(task => task.id !== taskId));\n//     } catch (error) {\n//       console.error(\"Error deleting task:\", error);\n//     }\n//   };\n\n//   return (\n//     <div>\n//       <h1>Task Management App</h1>\n//       <VoiceInput onCreate={handleCreateTask} />\n//       <TaskInput onCreate={handleCreateTask} />\n      \n//       {loading ? (\n//         <p>Loading tasks...</p>\n//       ) : (\n//         <div style={{ display: 'flex', gap: '20px' }}>\n//           <TaskList\n//             tasks={tasks}\n//             onSelectTask={setSelectedTask}  // Set selected task here\n//             onCompleteTask={handleCompleteTask}\n//             onDeleteTask={handleDeleteTask}\n//           />\n//           <TaskDetail task={selectedTask} />  \n//         </div>\n//       )}\n//     </div>\n//   );\n// };\n\n// export default App;\n\nimport React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport TaskInput from './TaskInput';\nimport VoiceInput from './VoiceInput';\nimport TaskList from './TaskList';\n\nconst App = () => {\n  const [tasks, setTasks] = useState([]);\n\n  // Fetch tasks from the server initially\n  useEffect(() => {\n    const fetchTasks = async () => {\n      try {\n        const response = await axios.get('http://localhost:8000/tasks/');\n        setTasks(response.data);\n      } catch (error) {\n        console.error(\"Error fetching tasks:\", error);\n      }\n    };\n\n    fetchTasks();\n  }, []);\n\n  // Handle task creation (called from TaskInput or VoiceInput)\n  const handleCreateTask = (newTask) => {\n    setTasks((prevTasks) => [...prevTasks, newTask]);\n  };\n\n  // Handle task completion\n  const handleCompleteTask = async (taskId) => {\n    try {\n      const taskToUpdate = tasks.find(task => task.id === taskId);\n      const updatedTask = { ...taskToUpdate, completed: !taskToUpdate.completed };\n\n      // Update the task in the backend\n      await axios.put(`http://localhost:8000/tasks/${taskId}`, updatedTask);\n\n      // Update the state locally\n      setTasks((prevTasks) =>\n        prevTasks.map((task) =>\n          task.id === taskId ? { ...task, completed: updatedTask.completed } : task\n        )\n      );\n    } catch (error) {\n      console.error(\"Error completing task:\", error);\n    }\n  };\n\n  // Handle task deletion\n  const handleDeleteTask = async (taskId) => {\n    try {\n      // Delete task from the backend\n      await axios.delete(`http://localhost:8000/tasks/${taskId}`);\n\n      // Update the state locally\n      setTasks((prevTasks) => prevTasks.filter((task) => task.id !== taskId));\n    } catch (error) {\n      console.error(\"Error deleting task:\", error);\n    }\n  };\n\n  return (\n    <div>\n      <h1>Task Manager</h1>\n      <TaskInput onCreate={handleCreateTask} />\n      <VoiceInput onCreate={handleCreateTask} />\n      <TaskList\n        tasks={tasks}\n        onSelectTask={(task) => console.log(task)}\n        onCompleteTask={handleCompleteTask}\n        onDeleteTask={handleDeleteTask}\n      />\n    </div>\n  );\n};\n\nexport default App;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}